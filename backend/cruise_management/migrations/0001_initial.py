# Generated by Django 5.1.3 on 2024-11-19 18:11

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsActivity',
            fields=[
                ('activityid', models.IntegerField(db_comment='Unique identifier for every entertainment and activity', primary_key=True, serialize=False)),
                ('activitytype', models.CharField(db_comment='Type of the activity', max_length=30)),
                ('activityname', models.CharField(db_comment='Name of the activity\t', max_length=50)),
                ('floor', models.IntegerField(db_comment='Floor at which the activity or entertainment is located')),
                ('capacity', models.SmallIntegerField(db_comment='Capacity of the activity/ entertainment')),
            ],
            options={
                'db_table': 'mms_activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsActivityPsngr',
            fields=[
                ('actreservationid', models.IntegerField(db_comment='Unique identifier for each entertainment and activity reservation', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mms_activity_psngr',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsBooking',
            fields=[
                ('bookingid', models.IntegerField(db_comment='Unique identifier for every booking', primary_key=True, serialize=False)),
                ('bookingdate', models.DateTimeField(db_comment='Date when the booking was made. Important for scheduling and availability tracking.')),
                ('bookingstatus', models.CharField(db_comment='Status of the booking, e.g., "Confirmed," "Pending," "Canceled." Assists with management tracking.', max_length=20)),
                ('estimatedcost', models.DecimalField(db_comment='Estimated cost for the trip including base cost, room price and package price exclusing tax and other add ons', decimal_places=2, max_digits=8)),
            ],
            options={
                'db_table': 'mms_booking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsGroup',
            fields=[
                ('groupid', models.IntegerField(db_comment='Unqiue identifier for every group', primary_key=True, serialize=False)),
                ('groupname', models.CharField(db_comment='Name of the group', max_length=50)),
            ],
            options={
                'db_table': 'mms_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsInvoice',
            fields=[
                ('invoiceid', models.IntegerField(db_comment='Primary key for the invoice.', primary_key=True, serialize=False)),
                ('invoicedate', models.DateTimeField(db_comment='Date when the invoice was generated. Important for tracking billing and payment cycles.')),
                ('totalamount', models.DecimalField(db_comment='Total amount billed on the invoice ', decimal_places=2, max_digits=8)),
                ('paymentstatus', models.CharField(db_comment='Indicates whether the invoice is "Paid," "Unpaid," or "Overdue." Tracks financial status.', max_length=20)),
                ('duedate', models.DateTimeField(db_comment='Date by which the payment should be completed. Ensures timely collection.')),
            ],
            options={
                'db_table': 'mms_invoice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsPackage',
            fields=[
                ('packageid', models.IntegerField(db_comment='Unique identifier for every package', primary_key=True, serialize=False)),
                ('packagename', models.CharField(db_comment='Name of the packages offered on the trip', max_length=30)),
                ('price', models.DecimalField(db_comment='Price of the package per person per night', decimal_places=2, max_digits=5)),
                ('packagedetails', models.CharField(db_comment='Details of the package', max_length=255)),
            ],
            options={
                'db_table': 'mms_package',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsPassenger',
            fields=[
                ('passengerid', models.IntegerField(db_comment='Unique identifier for each passenger', primary_key=True, serialize=False)),
                ('firstname', models.CharField(db_comment="Stores the passenger's first name", max_length=50)),
                ('lastname', models.CharField(db_comment="Stores the passenger's last name", max_length=50)),
                ('dateofbirth', models.DateTimeField(db_comment="Hold's the passenger's birth date")),
                ('gender', models.CharField(db_comment='Captures the gender of the passenger', max_length=1)),
                ('contactnumber', models.CharField(db_comment='A primary phone number to reach the passenger for notifications, emergencies, or updates related to their trip.', max_length=10)),
                ('emailaddress', models.CharField(db_comment='Stores the passengerÆs email address for electronic communication, including booking confirmations and promotional materials.', max_length=100)),
                ('streetaddr', models.CharField(max_length=50)),
                ('city', models.CharField(db_comment="Represents the passenger's residential address. This could be useful for billing, mailing tickets, or other physical correspondence.", max_length=50)),
                ('state', models.CharField(db_comment="Represents the passenger's residential address. This could be useful for billing, mailing tickets, or other physical correspondence.", max_length=50)),
                ('country', models.CharField(db_comment="Represents the passenger's residential address. This could be useful for billing, mailing tickets, or other physical correspondence.", max_length=50)),
                ('zipcode', models.CharField(db_comment="Represents the passenger's residential address. This could be useful for billing, mailing tickets, or other physical correspondence.", max_length=5)),
                ('nationality', models.CharField(db_comment="Records the passenger's nationality, which may be relevant for certain legal or travel restrictions.", max_length=50)),
                ('passportnumber', models.CharField(db_comment='Stores the passport number, useful for international cruise trips where passport details are required for customs and immigration checks.', max_length=20)),
                ('emergencycontactname', models.CharField(db_comment='The name of a designated emergency contact who can be notified if needed.', max_length=50)),
                ('emergencycontactnumber', models.CharField(db_comment='The contact number for the emergency contact, ensuring quick reachability in case of emergencies during the trip.', max_length=10)),
                ('groupid', models.IntegerField(db_comment='Unqiue identifier for every group')),
            ],
            options={
                'db_table': 'mms_passenger',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsPaymentDetail',
            fields=[
                ('paymentid', models.IntegerField(db_comment='Primary key for each payment record.', primary_key=True, serialize=False)),
                ('paymentdate', models.DateTimeField(db_comment='Date when the payment was made. Important for financial records.')),
                ('paymentamount', models.DecimalField(db_comment='Amount paid during the transaction. Helps track partial or full payments.', decimal_places=2, max_digits=6)),
                ('paymentmethod', models.CharField(db_comment='Method of payment (e.g., "Credit Card," "Bank Transfer," "Cash"). Provides context for processing.', max_length=20)),
                ('transactionid', models.CharField(db_comment='Unique ID from the payment provider for reference. Useful for audits and confirmations.', max_length=100)),
            ],
            options={
                'db_table': 'mms_payment_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsPort',
            fields=[
                ('portid', models.SmallIntegerField(db_comment='Primary key for the port entity. Unique identifier for each port.', primary_key=True, serialize=False)),
                ('portname', models.CharField(max_length=100)),
                ('address', models.CharField(db_comment='Street address where the port is located. ', max_length=50)),
                ('portcity', models.CharField(db_comment='Name of the country where the port is located. Useful for regional sorting and queries.', max_length=50)),
                ('portstate', models.CharField(db_comment='Name of the state (if applicable) where the port is located. Adds further location specificity.', max_length=50)),
                ('portcountry', models.CharField(db_comment='Name of the city where the port is located. Useful for detailed geographical reference.', max_length=50)),
                ('nearestairport', models.CharField(db_comment='Name of the nearest airport to the port', max_length=100)),
                ('parkingspots', models.SmallIntegerField(db_comment='Number of parking spots available at the port')),
            ],
            options={
                'db_table': 'mms_port',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsPortStop',
            fields=[
                ('itinerary_id', models.IntegerField(db_comment='Unique identifier for every port stop of a trip', primary_key=True, serialize=False)),
                ('arrivaltime', models.DateTimeField(db_comment='Time at which the ship arrives at the port')),
                ('departuretime', models.DateTimeField(db_comment='Time of departure from the port')),
                ('orderofstop', models.IntegerField(db_comment='The order in which the ship stops at each port')),
                ('porttime', models.DateTimeField(db_comment='Time at the port')),
                ('isstartport', models.CharField(db_comment='Indicates if the port is starting point of the trip', max_length=1)),
                ('isendport', models.CharField(db_comment='Indicates if the port is ending point of the trip', max_length=1)),
            ],
            options={
                'db_table': 'mms_port_stop',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsPsngrPackage',
            fields=[
                ('purchaseid', models.IntegerField(db_comment='Unique identifier for every package purchased by the passenger', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mms_psngr_package',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsRestaurant',
            fields=[
                ('restaurantid', models.IntegerField(db_comment='Unique identifier for each restaurant', primary_key=True, serialize=False)),
                ('restaurantname', models.CharField(db_comment='Name of the resturant', max_length=50)),
                ('floornumber', models.IntegerField(db_comment='Floor where the restaurant is located in the ship')),
                ('openingtime', models.DateTimeField(blank=True, db_comment='Time at which the restaurant opens', null=True)),
                ('closingtime', models.DateTimeField(blank=True, db_comment='Time at which the restaurant closes', null=True)),
                ('servesbreakfast', models.CharField(db_comment="Value to specify if the restaurant serves breakfast or not. For e.g., 'Y' for yes and 'N' for no", max_length=1)),
                ('serveslunch', models.CharField(db_comment="Value to specify if the restaurant serves lunch or not. For e.g., 'Y' for yes and 'N' for no", max_length=1)),
                ('servesdinner', models.CharField(db_comment="Value to specify if the restaurant serves dinner or not. For e.g., 'Y' for yes and 'N' for no", max_length=1)),
                ('servesalcohol', models.CharField(blank=True, db_comment="Value to specify if the restaurant serves alcohol or not. For e.g., 'Y' for yes and 'N' for no", max_length=1, null=True)),
            ],
            options={
                'db_table': 'mms_restaurant',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsRestaurantPsngr',
            fields=[
                ('restreservationid', models.IntegerField(db_comment='Unique ID for every restaurant reservation', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mms_restaurant_psngr',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsRoom',
            fields=[
                ('roomnumber', models.SmallIntegerField(db_comment='Unique identifier for every room', primary_key=True, serialize=False)),
                ('roomfloor', models.IntegerField(db_comment='Floor number of the room')),
                ('roomprice', models.DecimalField(db_comment='Price of the room per night', decimal_places=2, max_digits=8)),
            ],
            options={
                'db_table': 'mms_room',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsRoomLoc',
            fields=[
                ('locid', models.IntegerField(db_comment='Unique ID of the location\tin the ship', primary_key=True, serialize=False)),
                ('location', models.CharField(db_comment='Name of the location in the ship', max_length=50)),
            ],
            options={
                'db_table': 'mms_room_loc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsRoomType',
            fields=[
                ('stateroomtypeid', models.IntegerField(db_comment='Unique identifier of room type', primary_key=True, serialize=False)),
                ('stateroomtype', models.CharField(db_comment='Name of the stateroom type', max_length=20)),
                ('size', models.IntegerField(db_column='Size', db_comment='Size of the stateroom in SQFT')),
                ('numberofbeds', models.IntegerField(db_comment='Number of beds in the room')),
                ('numberofbaths', models.DecimalField(db_comment='Number of the bathrooms in the stateroom', decimal_places=1, max_digits=2)),
                ('numberofbalconies', models.IntegerField(db_comment='Number of balconies in the stateroom')),
            ],
            options={
                'db_table': 'mms_room_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MmsTrip',
            fields=[
                ('tripid', models.IntegerField(db_comment='Primary key for each trip. Unique identifier for each trip entry.', primary_key=True, serialize=False)),
                ('tripname', models.CharField(db_comment='Descriptive name of the trip.', max_length=50)),
                ('startdate', models.DateTimeField(db_comment='The date when the trip begins. Ensures accurate tracking of trip schedules.')),
                ('enddate', models.DateTimeField(db_comment='The date when the trip ends. Helps define the trip duration.')),
                ('tripcostperperson', models.DecimalField(db_comment='Cost per person for the trip, including taxes. Supports budgeting and billing.', decimal_places=2, max_digits=8)),
                ('tripstatus', models.CharField(db_comment='Status of the trip (e.g., upcoming, ongoing, completed).', max_length=20)),
            ],
            options={
                'db_table': 'mms_trip',
                'managed': False,
            },
        ),
    ]
