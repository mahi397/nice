-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-11-23 19:43:16 GMT-05:00
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



CREATE DATABASE test;

use test;

CREATE SEQUENCE auth_group_permissions_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE auth_group_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE auth_permission_seq START WITH 113 INCREMENT BY 1;

CREATE SEQUENCE auth_user_groups_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE auth_user_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE auth_user_user_permissions_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE django_admin_log_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE django_content_type_seq START WITH 29 INCREMENT BY 1;

CREATE SEQUENCE django_migrations_seq START WITH 34 INCREMENT BY 1;

CREATE SEQUENCE mms_activity_psngr_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE token_blacklist_blacklistedtoken_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE token_blacklist_outstandingtoken_seq START WITH 1 INCREMENT BY 1;

CREATE TABLE auth_group (
    id   NUMBER(10) NOT NULL,
    name VARCHAR2(150 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE auth_group ADD CONSTRAINT auth_group_pk PRIMARY KEY ( id );

ALTER TABLE auth_group ADD CONSTRAINT name UNIQUE ( name );

CREATE TABLE auth_group_permissions (
    id            NUMBER(19) NOT NULL,
    group_id      NUMBER(10) NOT NULL,
    permission_id NUMBER(10) NOT NULL
)
LOGGING;

CREATE INDEX auth_group_permissio_permission_id_84c5c92e_fk_auth_perm ON
    auth_group_permissions (
        permission_id
    ASC );

ALTER TABLE auth_group_permissions ADD CONSTRAINT auth_group_permissions_pk PRIMARY KEY ( id );

ALTER TABLE auth_group_permissions ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE ( group_id,
                                                                                                                       permission_id )
                                                                                                                       ;

CREATE TABLE auth_permission (
    id              NUMBER(10) NOT NULL,
    name            VARCHAR2(255 CHAR) NOT NULL,
    content_type_id NUMBER(10) NOT NULL,
    codename        VARCHAR2(100 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE auth_permission ADD CONSTRAINT auth_permission_pk PRIMARY KEY ( id );

ALTER TABLE auth_permission ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE ( content_type_id,
                                                                                                           codename );

CREATE TABLE auth_user (
    id           NUMBER(10) NOT NULL,
    password     VARCHAR2(128 CHAR) NOT NULL,
    last_login   TIMESTAMP DEFAULT NULL,
    is_superuser NUMBER(3) NOT NULL,
    username     VARCHAR2(150 CHAR) NOT NULL,
    first_name   VARCHAR2(150 CHAR) NOT NULL,
    last_name    VARCHAR2(150 CHAR) NOT NULL,
    email        VARCHAR2(254 CHAR) NOT NULL,
    is_staff     NUMBER(3) NOT NULL,
    is_active    NUMBER(3) NOT NULL,
    date_joined  TIMESTAMP NOT NULL
)
LOGGING;

ALTER TABLE auth_user ADD CONSTRAINT auth_user_pk PRIMARY KEY ( id );

ALTER TABLE auth_user ADD CONSTRAINT username UNIQUE ( username );

CREATE TABLE auth_user_groups (
    id       NUMBER(19) NOT NULL,
    user_id  NUMBER(10) NOT NULL,
    group_id NUMBER(10) NOT NULL
)
LOGGING;

CREATE INDEX auth_user_groups_group_id_97559544_fk_auth_group_id ON
    auth_user_groups (
        group_id
    ASC );

ALTER TABLE auth_user_groups ADD CONSTRAINT auth_user_groups_pk PRIMARY KEY ( id );

ALTER TABLE auth_user_groups ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE ( user_id,
                                                                                                     group_id );

CREATE TABLE auth_user_user_permissions (
    id            NUMBER(19) NOT NULL,
    user_id       NUMBER(10) NOT NULL,
    permission_id NUMBER(10) NOT NULL
)
LOGGING;

CREATE INDEX auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm ON
    auth_user_user_permissions (
        permission_id
    ASC );

ALTER TABLE auth_user_user_permissions ADD CONSTRAINT auth_user_user_permissions_pk PRIMARY KEY ( id );

ALTER TABLE auth_user_user_permissions ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE ( user_id
,
                                                                                                                              permission_id
                                                                                                                              );

CREATE TABLE django_admin_log (
    id              NUMBER(10) NOT NULL,
    action_time     TIMESTAMP NOT NULL,
    object_id       CLOB,
    object_repr     VARCHAR2(200 CHAR) NOT NULL,
    action_flag     NUMBER(5) NOT NULL,
    change_message  CLOB NOT NULL,
    content_type_id NUMBER(10) DEFAULT NULL,
    user_id         NUMBER(10) NOT NULL
)
LOGGING;

ALTER TABLE django_admin_log ADD CHECK ( action_flag > 0 );

CREATE INDEX django_admin_log_content_type_id_c4bce8eb_fk_django_co ON
    django_admin_log (
        content_type_id
    ASC );

CREATE INDEX django_admin_log_user_id_c564eba6_fk_auth_user_id ON
    django_admin_log (
        user_id
    ASC );

ALTER TABLE django_admin_log
    ADD CONSTRAINT django_admin_log_chk_1 CHECK ( ( action_flag >= 0 ) );

ALTER TABLE django_admin_log ADD CONSTRAINT django_admin_log_pk PRIMARY KEY ( id );

CREATE TABLE django_content_type (
    id        NUMBER(10) NOT NULL,
    app_label VARCHAR2(100 CHAR) NOT NULL,
    model     VARCHAR2(100 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE django_content_type ADD CONSTRAINT django_content_type_pk PRIMARY KEY ( id );

ALTER TABLE django_content_type ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE ( app_label,
                                                                                                          model );

CREATE TABLE django_migrations (
    id      NUMBER(19) NOT NULL,
    app     VARCHAR2(255 CHAR) NOT NULL,
    name    VARCHAR2(255 CHAR) NOT NULL,
    applied TIMESTAMP NOT NULL
)
LOGGING;

ALTER TABLE django_migrations ADD CONSTRAINT django_migrations_pk PRIMARY KEY ( id );

CREATE TABLE django_session (
    session_key  VARCHAR2(40 CHAR) NOT NULL,
    session_data CLOB NOT NULL,
    expire_date  TIMESTAMP NOT NULL
)
LOGGING;

CREATE INDEX django_session_expire_date_a5c62663 ON
    django_session (
        expire_date
    ASC );

ALTER TABLE django_session ADD CONSTRAINT django_session_pk PRIMARY KEY ( session_key );

CREATE TABLE mms_activity (
    activityid   NUMBER(5) NOT NULL,
    activitytype VARCHAR2(30 CHAR) NOT NULL,
    activityname VARCHAR2(50 CHAR) NOT NULL,
    floor        NUMBER(5) NOT NULL,
    capacity     NUMBER(10) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_activity.activityid IS
    'Unique identifier for every entertainment and activity';

COMMENT ON COLUMN mms_activity.activitytype IS
    'Type of the activity';

COMMENT ON COLUMN mms_activity.activityname IS
    'Name of the activity	';

COMMENT ON COLUMN mms_activity.floor IS
    'Floor at which the activity or entertainment is located';

COMMENT ON COLUMN mms_activity.capacity IS
    'Capacity of the activity/ entertainment';

ALTER TABLE mms_activity ADD CONSTRAINT mms_activity_pk PRIMARY KEY ( activityid );

CREATE TABLE mms_activity_psngr (
    actreservationid NUMBER(19) NOT NULL,
    activityid       NUMBER(5) NOT NULL,
    passengerid      NUMBER(19) DEFAULT NULL
)
LOGGING;

COMMENT ON COLUMN mms_activity_psngr.actreservationid IS
    'Unique identifier for each entertainment and activity reservation';

COMMENT ON COLUMN mms_activity_psngr.activityid IS
    'Unique identifier for every entertainment and activity';

COMMENT ON COLUMN mms_activity_psngr.passengerid IS
    'Unique identifier for each passenger';

CREATE INDEX mms_psngr_mms_activity_fk ON
    mms_activity_psngr (
        activityid
    ASC );

CREATE INDEX mms_activity_mms_psngr_fk ON
    mms_activity_psngr (
        passengerid
    ASC );

ALTER TABLE mms_activity_psngr ADD CONSTRAINT mms_activity_psngr_pk PRIMARY KEY ( actreservationid );

CREATE TABLE mms_booking (
    bookingid     NUMBER(19) NOT NULL,
    bookingdate   TIMESTAMP(0) NOT NULL,
    bookingstatus VARCHAR2(20 CHAR) NOT NULL,
    estimatedcost NUMBER(8, 2) NOT NULL,
    groupid       NUMBER(19) NOT NULL,
    tripid        NUMBER(19) NOT NULL,
    userid        NUMBER(10) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_booking.bookingid IS
    'Unique identifier for every booking';

COMMENT ON COLUMN mms_booking.bookingdate IS
    'Date when the booking was made. Important for scheduling and availability tracking.';

COMMENT ON COLUMN mms_booking.bookingstatus IS
    'Status of the booking, e.g., "Confirmed," "Pending," "Canceled." Assists with management tracking.';

COMMENT ON COLUMN mms_booking.estimatedcost IS
    'Estimated cost for the trip including base cost, room price and package price exclusing tax and other add ons';

COMMENT ON COLUMN mms_booking.groupid IS
    'Unqiue identifier for every group';

COMMENT ON COLUMN mms_booking.tripid IS
    'Primary key for each trip. Unique identifier for each trip entry.';

CREATE INDEX mms_booking_mms_group_fk ON
    mms_booking (
        groupid
    ASC );

CREATE INDEX mms_booking_mms_trip_fk ON
    mms_booking (
        tripid
    ASC );

CREATE INDEX fk_auth_user_booking ON
    mms_booking (
        userid
    ASC );

ALTER TABLE mms_booking ADD CONSTRAINT mms_booking_pk PRIMARY KEY ( bookingid );

CREATE TABLE mms_group (
    groupid   NUMBER(19) NOT NULL,
    groupname VARCHAR2(50 CHAR) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_group.groupid IS
    'Unqiue identifier for every group';

COMMENT ON COLUMN mms_group.groupname IS
    'Name of the group';

ALTER TABLE mms_group ADD CONSTRAINT mms_group_pk PRIMARY KEY ( groupid );

CREATE TABLE mms_invoice (
    invoiceid     NUMBER(19) NOT NULL,
    invoicedate   TIMESTAMP(0) NOT NULL,
    totalamount   NUMBER(8, 2) NOT NULL,
    paymentstatus VARCHAR2(20 CHAR) NOT NULL,
    duedate       TIMESTAMP(0) NOT NULL,
    bookingid     NUMBER(19) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_invoice.invoiceid IS
    'Primary key for the invoice.';

COMMENT ON COLUMN mms_invoice.invoicedate IS
    'Date when the invoice was generated. Important for tracking billing and payment cycles.';

COMMENT ON COLUMN mms_invoice.totalamount IS
    'Total amount billed on the invoice ';

COMMENT ON COLUMN mms_invoice.paymentstatus IS
    'Indicates whether the invoice is "Paid," "Unpaid," or "Overdue." Tracks financial status.';

COMMENT ON COLUMN mms_invoice.duedate IS
    'Date by which the payment should be completed. Ensures timely collection.';

COMMENT ON COLUMN mms_invoice.bookingid IS
    'Unique identifier for every booking';

CREATE INDEX mms_invoice_mms_booking_fk ON
    mms_invoice (
        bookingid
    ASC );

ALTER TABLE mms_invoice ADD CONSTRAINT mms_invoice_pk PRIMARY KEY ( invoiceid );

CREATE TABLE mms_package (
    packageid      NUMBER(5) NOT NULL,
    packagename    VARCHAR2(30 CHAR) NOT NULL,
    base_price     NUMBER(5, 2) NOT NULL,
    packagedetails VARCHAR2(255 CHAR) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_package.packageid IS
    'Unique identifier for every package';

COMMENT ON COLUMN mms_package.packagename IS
    'Name of the packages offered on the trip';

COMMENT ON COLUMN mms_package.base_price IS
    'Price of the package per person per night';

COMMENT ON COLUMN mms_package.packagedetails IS
    'Details of the package';

ALTER TABLE mms_package ADD CONSTRAINT mms_package_pk PRIMARY KEY ( packageid );

CREATE TABLE mms_passenger (
    passengerid            NUMBER(19) NOT NULL,
    firstname              VARCHAR2(50 CHAR) NOT NULL,
    lastname               VARCHAR2(50 CHAR) NOT NULL,
    dateofbirth            TIMESTAMP(0) NOT NULL,
    gender                 CHAR(1 CHAR) NOT NULL,
    contactnumber          VARCHAR2(10 CHAR) NOT NULL,
    emailaddress           VARCHAR2(100 CHAR) NOT NULL,
    streetaddr             VARCHAR2(50 CHAR) NOT NULL,
    city                   VARCHAR2(50 CHAR) NOT NULL,
    state                  VARCHAR2(50 CHAR) NOT NULL,
    country                VARCHAR2(50 CHAR) NOT NULL,
    zipcode                VARCHAR2(5 CHAR) NOT NULL,
    nationality            VARCHAR2(50 CHAR) NOT NULL,
    passportnumber         VARCHAR2(20 CHAR) NOT NULL,
    emergencycontactname   VARCHAR2(50 CHAR) NOT NULL,
    emergencycontactnumber VARCHAR2(10 CHAR) NOT NULL,
    groupid                NUMBER(19) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_passenger.passengerid IS
    'Unique identifier for each passenger';

COMMENT ON COLUMN mms_passenger.firstname IS
    'Stores the passenger''s first name';

COMMENT ON COLUMN mms_passenger.lastname IS
    'Stores the passenger''s last name';

COMMENT ON COLUMN mms_passenger.dateofbirth IS
    'Hold''s the passenger''s birth date';

COMMENT ON COLUMN mms_passenger.gender IS
    'Captures the gender of the passenger';

COMMENT ON COLUMN mms_passenger.contactnumber IS
    'A primary phone number to reach the passenger for notifications, emergencies, or updates related to their trip.';

COMMENT ON COLUMN mms_passenger.emailaddress IS
    'Stores the passenger├ÄΓÇ£├âΓÇí├âΓÇôs email address for electronic communication, including booking confirmations and promotional materials.'
    ;

COMMENT ON COLUMN mms_passenger.streetaddr IS
    'The street address of the passenger''s primary residence, used for correspondence and identification purposes.';

COMMENT ON COLUMN mms_passenger.city IS
    'Represents the passenger''s residential address. This could be useful for billing, mailing tickets, or other physical correspondence.'
    ;

COMMENT ON COLUMN mms_passenger.state IS
    'Represents the passenger''s residential address. This could be useful for billing, mailing tickets, or other physical correspondence.'
    ;

COMMENT ON COLUMN mms_passenger.country IS
    'Represents the passenger''s residential address. This could be useful for billing, mailing tickets, or other physical correspondence.'
    ;

COMMENT ON COLUMN mms_passenger.zipcode IS
    'Represents the passenger''s residential address. This could be useful for billing, mailing tickets, or other physical correspondence.'
    ;

COMMENT ON COLUMN mms_passenger.nationality IS
    'Records the passenger''s nationality, which may be relevant for certain legal or travel restrictions.';

COMMENT ON COLUMN mms_passenger.passportnumber IS
    'Stores the passport number, useful for international cruise trips where passport details are required for customs and immigration checks.'
    ;

COMMENT ON COLUMN mms_passenger.emergencycontactname IS
    'The name of a designated emergency contact who can be notified if needed.';

COMMENT ON COLUMN mms_passenger.emergencycontactnumber IS
    'The contact number for the emergency contact, ensuring quick reachability in case of emergencies during the trip.';

COMMENT ON COLUMN mms_passenger.groupid IS
    'Unqiue identifier for every group';

CREATE INDEX mms_passenger_mms_group_fk ON
    mms_passenger (
        groupid
    ASC );

ALTER TABLE mms_passenger ADD CONSTRAINT mms_passenger_pk PRIMARY KEY ( passengerid );

CREATE TABLE mms_payment_detail (
    paymentid     NUMBER(19) NOT NULL,
    paymentdate   TIMESTAMP(0) NOT NULL,
    paymentamount NUMBER(6, 2) NOT NULL,
    paymentmethod VARCHAR2(20 CHAR) NOT NULL,
    transactionid VARCHAR2(100 CHAR) NOT NULL,
    invoiceid     NUMBER(19) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_payment_detail.paymentid IS
    'Primary key for each payment record.';

COMMENT ON COLUMN mms_payment_detail.paymentdate IS
    'Date when the payment was made. Important for financial records.';

COMMENT ON COLUMN mms_payment_detail.paymentamount IS
    'Amount paid during the transaction. Helps track partial or full payments.';

COMMENT ON COLUMN mms_payment_detail.paymentmethod IS
    'Method of payment (e.g., "Credit Card," "Bank Transfer," "Cash"). Provides context for processing.';

COMMENT ON COLUMN mms_payment_detail.transactionid IS
    'Unique ID from the payment provider for reference. Useful for audits and confirmations.';

COMMENT ON COLUMN mms_payment_detail.invoiceid IS
    'Primary key for the invoice.';

CREATE INDEX mms_payment_mms_invoice_fk ON
    mms_payment_detail (
        invoiceid
    ASC );

ALTER TABLE mms_payment_detail ADD CONSTRAINT mms_payment_detail_pk PRIMARY KEY ( paymentid,
                                                                                  invoiceid );

CREATE TABLE mms_port (
    portid         NUMBER(10) NOT NULL,
    portname       VARCHAR2(100 CHAR) NOT NULL,
    address        VARCHAR2(50 CHAR) NOT NULL,
    portcity       VARCHAR2(50 CHAR) NOT NULL,
    portstate      VARCHAR2(50 CHAR) NOT NULL,
    portcountry    VARCHAR2(50 CHAR) NOT NULL,
    nearestairport VARCHAR2(100 CHAR) NOT NULL,
    parkingspots   NUMBER(10) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_port.portid IS
    'Primary key for the port entity. Unique identifier for each port.';

COMMENT ON COLUMN mms_port.portname IS
    'The name of the port where the cruise either stops during the itinerary or starts/ends the trip. This attribute identifies specific locations included in the trip.'
    ;

COMMENT ON COLUMN mms_port.address IS
    'Street address where the port is located. ';

COMMENT ON COLUMN mms_port.portcity IS
    'Name of the country where the port is located. Useful for regional sorting and queries.';

COMMENT ON COLUMN mms_port.portstate IS
    'Name of the state (if applicable) where the port is located. Adds further location specificity.';

COMMENT ON COLUMN mms_port.portcountry IS
    'Name of the city where the port is located. Useful for detailed geographical reference.';

COMMENT ON COLUMN mms_port.nearestairport IS
    'Name of the nearest airport to the port';

COMMENT ON COLUMN mms_port.parkingspots IS
    'Number of parking spots available at the port';

ALTER TABLE mms_port ADD CONSTRAINT mms_port_pk PRIMARY KEY ( portid );

CREATE TABLE mms_port_stop (
    itinerary_id  NUMBER(19) NOT NULL,
    portid        NUMBER(10) NOT NULL,
    tripid        NUMBER(19) NOT NULL,
    arrivaltime   TIMESTAMP(0) NOT NULL,
    departuretime TIMESTAMP(0) NOT NULL,
    orderofstop   NUMBER(5) NOT NULL,
    porttime      TIMESTAMP(0) NOT NULL,
    isstartport   CHAR(1 CHAR) NOT NULL,
    isendport     CHAR(1 CHAR) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_port_stop.itinerary_id IS
    'Unique identifier for every port stop of a trip';

COMMENT ON COLUMN mms_port_stop.portid IS
    'Primary key for the port entity. Unique identifier for each port.';

COMMENT ON COLUMN mms_port_stop.tripid IS
    'Primary key for each trip. Unique identifier for each trip entry.';

COMMENT ON COLUMN mms_port_stop.arrivaltime IS
    'Time at which the ship arrives at the port';

COMMENT ON COLUMN mms_port_stop.departuretime IS
    'Time of departure from the port';

COMMENT ON COLUMN mms_port_stop.orderofstop IS
    'The order in which the ship stops at each port';

COMMENT ON COLUMN mms_port_stop.porttime IS
    'Time at the port';

COMMENT ON COLUMN mms_port_stop.isstartport IS
    'Indicates if the port is starting point of the trip';

COMMENT ON COLUMN mms_port_stop.isendport IS
    'Indicates if the port is ending point of the trip';

CREATE INDEX mms_port_stop_mms_port_fk ON
    mms_port_stop (
        portid
    ASC );

CREATE INDEX mms_port_stop_mms_trip_fk ON
    mms_port_stop (
        tripid
    ASC );

ALTER TABLE mms_port_stop ADD CONSTRAINT mms_port_stop_pk PRIMARY KEY ( itinerary_id );

CREATE TABLE mms_psngr_package (
    purchaseid  NUMBER(19) NOT NULL,
    packageid   NUMBER(5) NOT NULL,
    passengerid NUMBER(19) DEFAULT NULL,
    sale_price  NUMBER(6, 2) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_psngr_package.purchaseid IS
    'Unique identifier for every package purchased by the passenger';

COMMENT ON COLUMN mms_psngr_package.packageid IS
    'Unique identifier for every package';

COMMENT ON COLUMN mms_psngr_package.passengerid IS
    'Unique identifier for each passenger';

COMMENT ON COLUMN mms_psngr_package.sale_price IS
    'The actual price paid by the passenger for the package at the time of booking. nThis price may differ from the base price in the mms_package table due to discounts, promotions, or special offers applied at the time of purchase.n '
    ;

CREATE INDEX mms_package_mms_psngr_fk ON
    mms_psngr_package (
        passengerid
    ASC );

CREATE INDEX mms_psngr_mms_package_fk ON
    mms_psngr_package (
        packageid
    ASC );

ALTER TABLE mms_psngr_package ADD CONSTRAINT mms_psngr_package_pk PRIMARY KEY ( purchaseid );

CREATE TABLE mms_restaurant (
    restaurantid    NUMBER(5) NOT NULL,
    restaurantname  VARCHAR2(50 CHAR) NOT NULL,
    floornumber     NUMBER(5) NOT NULL,
    openingtime     TIMESTAMP(0) DEFAULT NULL,
    closingtime     TIMESTAMP(0) DEFAULT NULL,
    servesbreakfast CHAR(1 CHAR) NOT NULL,
    serveslunch     CHAR(1 CHAR) NOT NULL,
    servesdinner    CHAR(1 CHAR) NOT NULL,
    servesalcohol   CHAR(1 CHAR) DEFAULT NULL
)
LOGGING;

COMMENT ON COLUMN mms_restaurant.restaurantid IS
    'Unique identifier for each restaurant';

COMMENT ON COLUMN mms_restaurant.restaurantname IS
    'Name of the resturant';

COMMENT ON COLUMN mms_restaurant.floornumber IS
    'Floor where the restaurant is located in the ship';

COMMENT ON COLUMN mms_restaurant.openingtime IS
    'Time at which the restaurant opens';

COMMENT ON COLUMN mms_restaurant.closingtime IS
    'Time at which the restaurant closes';

COMMENT ON COLUMN mms_restaurant.servesbreakfast IS
    'Value to specify if the restaurant serves breakfast or not. For e.g., ''Y'' for yes and ''N'' for no';

COMMENT ON COLUMN mms_restaurant.serveslunch IS
    'Value to specify if the restaurant serves lunch or not. For e.g., ''Y'' for yes and ''N'' for no';

COMMENT ON COLUMN mms_restaurant.servesdinner IS
    'Value to specify if the restaurant serves dinner or not. For e.g., ''Y'' for yes and ''N'' for no';

COMMENT ON COLUMN mms_restaurant.servesalcohol IS
    'Value to specify if the restaurant serves alcohol or not. For e.g., ''Y'' for yes and ''N'' for no';

ALTER TABLE mms_restaurant ADD CONSTRAINT mms_restaurant_pk PRIMARY KEY ( restaurantid );

CREATE TABLE mms_restaurant_psngr (
    restreservationid NUMBER(19) NOT NULL,
    restaurantid      NUMBER(5) NOT NULL,
    passengerid       NUMBER(19) DEFAULT NULL
)
LOGGING;

COMMENT ON COLUMN mms_restaurant_psngr.restreservationid IS
    'Unique ID for every restaurant reservation';

COMMENT ON COLUMN mms_restaurant_psngr.restaurantid IS
    'Unique identifier for each restaurant';

COMMENT ON COLUMN mms_restaurant_psngr.passengerid IS
    'Unique identifier for each passenger';

CREATE INDEX mms_psngr_mms_restaurant_fk ON
    mms_restaurant_psngr (
        restaurantid
    ASC );

CREATE INDEX mms_restaurant_mms_psngr_fk ON
    mms_restaurant_psngr (
        passengerid
    ASC );

ALTER TABLE mms_restaurant_psngr ADD CONSTRAINT mms_restaurant_psngr_pk PRIMARY KEY ( restreservationid );

CREATE TABLE mms_room (
    roomnumber      NUMBER(10) NOT NULL,
    roomfloor       NUMBER(5) NOT NULL,
    roombaseprice   NUMBER(8, 2) NOT NULL,
    stateroomtypeid NUMBER(5) NOT NULL,
    locid           NUMBER(5) NOT NULL,
    bookingid       NUMBER(19) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_room.roomnumber IS
    'Unique identifier for every room';

COMMENT ON COLUMN mms_room.roomfloor IS
    'Floor number of the room';

COMMENT ON COLUMN mms_room.roombaseprice IS
    'Price of the room per night';

COMMENT ON COLUMN mms_room.stateroomtypeid IS
    'Unique identifier of room type';

COMMENT ON COLUMN mms_room.bookingid IS
    'Unique identifier for every booking';

CREATE INDEX mms_room_mms_booking_fk ON
    mms_room (
        bookingid
    ASC );

CREATE INDEX mms_room_mms_room_loc_fk ON
    mms_room (
        locid
    ASC );

CREATE INDEX mms_room_mms_room_type_fk ON
    mms_room (
        stateroomtypeid
    ASC );

ALTER TABLE mms_room ADD CONSTRAINT mms_room_pk PRIMARY KEY ( roomnumber );

CREATE TABLE mms_room_loc (
    locid    NUMBER(5) NOT NULL,
    location VARCHAR2(50 CHAR) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_room_loc.locid IS
    'Unique ID of the location	in the ship';

COMMENT ON COLUMN mms_room_loc.location IS
    'Name of the location in the ship';

ALTER TABLE mms_room_loc ADD CONSTRAINT mms_room_loc_pk PRIMARY KEY ( locid );

CREATE TABLE mms_room_type (
    stateroomtypeid   NUMBER(5) NOT NULL,
    stateroomtype     VARCHAR2(20 CHAR) NOT NULL,
    roomsize          NUMBER(19) NOT NULL,
    numberofbeds      NUMBER(5) NOT NULL,
    numberofbaths     NUMBER(2, 1) NOT NULL,
    numberofbalconies NUMBER(5) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_room_type.stateroomtypeid IS
    'Unique identifier of room type';

COMMENT ON COLUMN mms_room_type.stateroomtype IS
    'Name of the stateroom type';

COMMENT ON COLUMN mms_room_type.roomsize IS
    'Size of the stateroom in SQFT';

COMMENT ON COLUMN mms_room_type.numberofbeds IS
    'Number of beds in the room';

COMMENT ON COLUMN mms_room_type.numberofbaths IS
    'Number of the bathrooms in the stateroom';

COMMENT ON COLUMN mms_room_type.numberofbalconies IS
    'Number of balconies in the stateroom';

ALTER TABLE mms_room_type ADD CONSTRAINT mms_room_type_pk PRIMARY KEY ( stateroomtypeid );

CREATE TABLE mms_trip (
    tripid            NUMBER(19) NOT NULL,
    tripname          VARCHAR2(50 CHAR) NOT NULL,
    startdate         TIMESTAMP(0) NOT NULL,
    enddate           TIMESTAMP(0) NOT NULL,
    tripcostperperson NUMBER(8, 2) NOT NULL,
    tripstatus        VARCHAR2(20 CHAR) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_trip.tripid IS
    'Primary key for each trip. Unique identifier for each trip entry.';

COMMENT ON COLUMN mms_trip.tripname IS
    'Descriptive name of the trip.';

COMMENT ON COLUMN mms_trip.startdate IS
    'The date when the trip begins. Ensures accurate tracking of trip schedules.';

COMMENT ON COLUMN mms_trip.enddate IS
    'The date when the trip ends. Helps define the trip duration.';

COMMENT ON COLUMN mms_trip.tripcostperperson IS
    'Cost per person for the trip, including taxes. Supports budgeting and billing.';

COMMENT ON COLUMN mms_trip.tripstatus IS
    'Status of the trip (e.g., upcoming, ongoing, completed).';

ALTER TABLE mms_trip ADD CONSTRAINT mms_trip_pk PRIMARY KEY ( tripid );

CREATE TABLE mms_trip_activity (
    tripactivityid NUMBER(10) NOT NULL,
    tripid         NUMBER(19) NOT NULL,
    activityid     NUMBER(5) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_trip_activity.tripactivityid IS
    'A unique identifier for each record in the trip_activity junction table. This serves as the primary key and distinguishes each trip-activity relationship.'
    ;

COMMENT ON COLUMN mms_trip_activity.activityid IS
    'Unique identifier for every entertainment and activity';

CREATE INDEX mms_activity_mms_trip_fk ON
    mms_trip_activity (
        tripid
    ASC );

CREATE INDEX mms_trip_mms_activity_fk ON
    mms_trip_activity (
        activityid
    ASC );

ALTER TABLE mms_trip_activity ADD CONSTRAINT mms_trip_activity_pk PRIMARY KEY ( tripactivityid );

CREATE TABLE mms_trip_restaurant (
    restauranttripid NUMBER(10) NOT NULL,
    tripid           NUMBER(19) NOT NULL,
    restaurantid     NUMBER(5) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_trip_restaurant.restauranttripid IS
    'A unique identifier for each record in the trip_restaurant junction table. This serves as the primary key and uniquely identifies the relationship between a trip and a restaurant.'
    ;

COMMENT ON COLUMN mms_trip_restaurant.tripid IS
    'Primary key for each trip. Unique identifier for each trip entry.';

COMMENT ON COLUMN mms_trip_restaurant.restaurantid IS
    'Unique identifier for each restaurant';

CREATE INDEX mms_restaurant_mms_trip_fk ON
    mms_trip_restaurant (
        tripid
    ASC );

CREATE INDEX mms_trip_mms_restaurant_fk ON
    mms_trip_restaurant (
        restaurantid
    ASC );

ALTER TABLE mms_trip_restaurant ADD CONSTRAINT mms_trip_restaurant_pk PRIMARY KEY ( restauranttripid );

CREATE TABLE mms_trip_room (
    triproomid    NUMBER(10) NOT NULL,
    roomnumber    NUMBER(10) NOT NULL,
    tripid        NUMBER(19) NOT NULL,
    roomsaleprice NUMBER(8, 2) NOT NULL
)
LOGGING;

COMMENT ON COLUMN mms_trip_room.triproomid IS
    'A unique identifier for the association between a trip and a specific room allocation. This ID links a particular room to a specific trip, allowing the tracking of room assignments for each trip. It is used to map rooms to the trips they are associated with, facilitating room reservations and occupancy management for each trip.'
    ;

COMMENT ON COLUMN mms_trip_room.roomsaleprice IS
    'Room sale price for that particular trip';

CREATE INDEX mms_trip_room_mms_room_fk ON
    mms_trip_room (
        roomnumber
    ASC );

CREATE INDEX mms_trip_room_mms_trip_fk ON
    mms_trip_room (
        tripid
    ASC );

ALTER TABLE mms_trip_room ADD CONSTRAINT mms_trip_room_pk PRIMARY KEY ( triproomid );

CREATE TABLE token_blacklist_blacklistedtoken (
    id             NUMBER(19) NOT NULL,
    blacklisted_at TIMESTAMP NOT NULL,
    token_id       NUMBER(19) NOT NULL
)
LOGGING;

ALTER TABLE token_blacklist_blacklistedtoken ADD CONSTRAINT token_blacklist_blacklistedtoken_pk PRIMARY KEY ( id );

ALTER TABLE token_blacklist_blacklistedtoken ADD CONSTRAINT token_id UNIQUE ( token_id );

CREATE TABLE token_blacklist_outstandingtoken (
    id         NUMBER(19) NOT NULL,
    token      CLOB NOT NULL,
    created_at TIMESTAMP DEFAULT NULL,
    expires_at TIMESTAMP NOT NULL,
    user_id    NUMBER(10) DEFAULT NULL,
    jti        VARCHAR2(255 CHAR) NOT NULL
)
LOGGING;

CREATE INDEX token_blacklist_outs_user_id_83bc629a_fk_auth_user ON
    token_blacklist_outstandingtoken (
        user_id
    ASC );

ALTER TABLE token_blacklist_outstandingtoken ADD CONSTRAINT token_blacklist_outstandingtoken_pk PRIMARY KEY ( id );

ALTER TABLE token_blacklist_outstandingtoken ADD CONSTRAINT token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_uniq UNIQUE ( jti );

ALTER TABLE auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY ( permission_id )
        REFERENCES auth_permission ( id )
    NOT DEFERRABLE;

ALTER TABLE auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY ( group_id )
        REFERENCES auth_group ( id )
    NOT DEFERRABLE;

ALTER TABLE auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY ( content_type_id )
        REFERENCES django_content_type ( id )
    NOT DEFERRABLE;

ALTER TABLE auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY ( group_id )
        REFERENCES auth_group ( id )
    NOT DEFERRABLE;

ALTER TABLE auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY ( user_id )
        REFERENCES auth_user ( id )
    NOT DEFERRABLE;

ALTER TABLE auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY ( permission_id )
        REFERENCES auth_permission ( id )
    NOT DEFERRABLE;

ALTER TABLE auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY ( user_id )
        REFERENCES auth_user ( id )
    NOT DEFERRABLE;

ALTER TABLE django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY ( content_type_id )
        REFERENCES django_content_type ( id )
    NOT DEFERRABLE;

ALTER TABLE django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY ( user_id )
        REFERENCES auth_user ( id )
    NOT DEFERRABLE;

ALTER TABLE mms_booking
    ADD CONSTRAINT fk_auth_user_booking FOREIGN KEY ( userid )
        REFERENCES auth_user ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE mms_activity_psngr
    ADD CONSTRAINT mms_activity_mms_psngr_fk FOREIGN KEY ( passengerid )
        REFERENCES mms_passenger ( passengerid )
    NOT DEFERRABLE;

ALTER TABLE mms_trip_activity
    ADD CONSTRAINT mms_activity_mms_trip_fk FOREIGN KEY ( tripid )
        REFERENCES mms_trip ( tripid )
    NOT DEFERRABLE;

ALTER TABLE mms_booking
    ADD CONSTRAINT mms_booking_mms_group_fk FOREIGN KEY ( groupid )
        REFERENCES mms_group ( groupid )
    NOT DEFERRABLE;

ALTER TABLE mms_booking
    ADD CONSTRAINT mms_booking_mms_trip_fk FOREIGN KEY ( tripid )
        REFERENCES mms_trip ( tripid )
    NOT DEFERRABLE;

ALTER TABLE mms_invoice
    ADD CONSTRAINT mms_invoice_mms_booking_fk FOREIGN KEY ( bookingid )
        REFERENCES mms_booking ( bookingid )
    NOT DEFERRABLE;

ALTER TABLE mms_psngr_package
    ADD CONSTRAINT mms_package_mms_psngr_fk FOREIGN KEY ( passengerid )
        REFERENCES mms_passenger ( passengerid )
    NOT DEFERRABLE;

ALTER TABLE mms_passenger
    ADD CONSTRAINT mms_passenger_mms_group_fk FOREIGN KEY ( groupid )
        REFERENCES mms_group ( groupid )
    NOT DEFERRABLE;

ALTER TABLE mms_payment_detail
    ADD CONSTRAINT mms_payment_mms_invoice_fk FOREIGN KEY ( invoiceid )
        REFERENCES mms_invoice ( invoiceid )
    NOT DEFERRABLE;

ALTER TABLE mms_port_stop
    ADD CONSTRAINT mms_port_stop_mms_port_fk FOREIGN KEY ( portid )
        REFERENCES mms_port ( portid )
    NOT DEFERRABLE;

ALTER TABLE mms_port_stop
    ADD CONSTRAINT mms_port_stop_mms_trip_fk FOREIGN KEY ( tripid )
        REFERENCES mms_trip ( tripid )
    NOT DEFERRABLE;

ALTER TABLE mms_activity_psngr
    ADD CONSTRAINT mms_psngr_mms_activity_fk FOREIGN KEY ( activityid )
        REFERENCES mms_activity ( activityid )
    NOT DEFERRABLE;

ALTER TABLE mms_psngr_package
    ADD CONSTRAINT mms_psngr_mms_package_fk FOREIGN KEY ( packageid )
        REFERENCES mms_package ( packageid )
    NOT DEFERRABLE;

ALTER TABLE mms_restaurant_psngr
    ADD CONSTRAINT mms_psngr_mms_restaurant_fk FOREIGN KEY ( restaurantid )
        REFERENCES mms_restaurant ( restaurantid )
    NOT DEFERRABLE;

ALTER TABLE mms_restaurant_psngr
    ADD CONSTRAINT mms_restaurant_mms_psngr_fk FOREIGN KEY ( passengerid )
        REFERENCES mms_passenger ( passengerid )
    NOT DEFERRABLE;

ALTER TABLE mms_trip_restaurant
    ADD CONSTRAINT mms_restaurant_mms_trip_fk FOREIGN KEY ( tripid )
        REFERENCES mms_trip ( tripid )
    NOT DEFERRABLE;

ALTER TABLE mms_room
    ADD CONSTRAINT mms_room_mms_room_loc_fk FOREIGN KEY ( locid )
        REFERENCES mms_room_loc ( locid )
    NOT DEFERRABLE;

ALTER TABLE mms_room
    ADD CONSTRAINT mms_room_mms_room_type_fk FOREIGN KEY ( stateroomtypeid )
        REFERENCES mms_room_type ( stateroomtypeid )
    NOT DEFERRABLE;

ALTER TABLE mms_trip_activity
    ADD CONSTRAINT mms_trip_mms_activity_fk FOREIGN KEY ( activityid )
        REFERENCES mms_activity ( activityid )
    NOT DEFERRABLE;

ALTER TABLE mms_trip_restaurant
    ADD CONSTRAINT mms_trip_mms_restaurant_fk FOREIGN KEY ( restaurantid )
        REFERENCES mms_restaurant ( restaurantid )
    NOT DEFERRABLE;

ALTER TABLE mms_trip_room
    ADD CONSTRAINT mms_trip_room_mms_room_fk FOREIGN KEY ( roomnumber )
        REFERENCES mms_room ( roomnumber )
    NOT DEFERRABLE;

ALTER TABLE mms_trip_room
    ADD CONSTRAINT mms_trip_room_mms_trip_fk FOREIGN KEY ( tripid )
        REFERENCES mms_trip ( tripid )
    NOT DEFERRABLE;

ALTER TABLE token_blacklist_blacklistedtoken
    ADD CONSTRAINT token_blacklist_blacklistedtoken_token_id_3cc7fe56_fk FOREIGN KEY ( token_id )
        REFERENCES token_blacklist_outstandingtoken ( id )
    NOT DEFERRABLE;

ALTER TABLE token_blacklist_outstandingtoken
    ADD CONSTRAINT token_blacklist_outs_user_id_83bc629a_fk_auth_user FOREIGN KEY ( user_id )
        REFERENCES auth_user ( id )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER auth_group_seq_tr BEFORE
    INSERT ON auth_group
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := auth_group_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER auth_group_permissions_seq_tr BEFORE
    INSERT ON auth_group_permissions
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := auth_group_permissions_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER auth_permission_seq_tr BEFORE
    INSERT ON auth_permission
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := auth_permission_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER auth_user_seq_tr BEFORE
    INSERT ON auth_user
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := auth_user_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER auth_user_groups_seq_tr BEFORE
    INSERT ON auth_user_groups
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := auth_user_groups_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER auth_user_user_permissions_seq_tr BEFORE
    INSERT ON auth_user_user_permissions
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := auth_user_user_permissions_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER django_admin_log_seq_tr BEFORE
    INSERT ON django_admin_log
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := django_admin_log_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER django_content_type_seq_tr BEFORE
    INSERT ON django_content_type
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := django_content_type_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER django_migrations_seq_tr BEFORE
    INSERT ON django_migrations
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := django_migrations_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER mms_activity_psngr_seq_tr BEFORE
    INSERT ON mms_activity_psngr
    FOR EACH ROW
    WHEN ( new.actreservationid IS NULL )
BEGIN
    :new.actreservationid := mms_activity_psngr_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER token_blacklist_blacklistedtoken_seq_tr BEFORE
    INSERT ON token_blacklist_blacklistedtoken
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := token_blacklist_blacklistedtoken_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER token_blacklist_outstandingtoken_seq_tr BEFORE
    INSERT ON token_blacklist_outstandingtoken
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := token_blacklist_outstandingtoken_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            32
-- CREATE INDEX                            30
-- ALTER TABLE                             76
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          12
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         12
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              1
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
